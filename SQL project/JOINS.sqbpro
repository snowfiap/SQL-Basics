<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/ELCOT/Desktop/SQL Exercise files/Ex_Files_Learning_SQL_Prog/Exercise Files/SQLite/quizdata.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser query pragmas" current="2"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1711"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainpeople"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="people" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="76"/><column index="2" value="78"/><column index="3" value="78"/><column index="4" value="106"/><column index="5" value="82"/><column index="6" value="90"/><column index="7" value="82"/><column index="8" value="96"/><column index="9" value="73"/><column index="10" value="40"/><column index="11" value="223"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="states" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="97"/><column index="2" value="97"/><column index="3" value="62"/><column index="4" value="118"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="JOINS">		--Joins in SQL - Used to join two or more tables together based on a single related field--
-- EXPLICIT JOIN --
SELECT *
FROM people
JOIN states ON people.state_code=states.state_abbrev;--It returns the whole people table with the matched field in the states table--

 SELECT people.first_name,people.last_name,states.division
FROM people
JOIN states ON people.state_code=states.state_abbrev;--It joins the people table with the state_abbrev on the states table--

--Applying conditions in Joins--
SELECT *
FROM people
JOIN states ON people.state_code=states.state_abbrev
WHERE people.first_name LIKE 'J%' AND states.region='South';
--It returns the people table with the first_name starting with J and the states table with South region along with the remaining fields in both the table--

-- IMPLICIT JOIN --
SELECT people.first_name,states.state_abbrev
FROM people,states
WHERE people.state_code=states.state_abbrev;--join function takes place without uing the join keyword--

--we can also use nickaname if the table name is long--
SELECT ppl.first_name,ppl.last_name,st.region
FROM people ppl,states st
WHERE ppl.state_code=st.state_abbrev;

-- you can change the left and right join by swapping the table name--
SELECT ppl.first_name,ppl.last_name,st.region
FROM people ppl
JOIN states st ON ppl.state_code=st.state_abbrev;

--changing the table name to change the left and right join--
SELECT ppl.first_name,ppl.last_name,st.region
FROM  states st
JOIN people ppl ON ppl.state_code=st.state_abbrev;

SELECT DISTINCT(people.state_code),states.state_abbrev
FROM states 
LEFT JOIN people ON people.state_code=states.state_abbrev
ORDER BY people.state_code;
--State table as a whole is combined with the people table here the people table consists of only the data which matches with the states table-- 









	
		</sql><sql name="JOINS (1)">		--Joins in SQL - Used to join two or more tables together based on a single related field--
-- EXPLICIT JOIN --
SELECT *
FROM people
JOIN states ON people.state_code=states.state_abbrev;--It returns the whole people table with the matched field in the states table--

 SELECT people.first_name,people.last_name,states.division
FROM people
JOIN states ON people.state_code=states.state_abbrev;--It joins the people table with the state_abbrev on the states table--

--Applying conditions in Joins--
SELECT *
FROM people
JOIN states ON people.state_code=states.state_abbrev
WHERE people.first_name LIKE 'J%' AND states.region='South';
--It returns the people table with the first_name starting with J and the states table with South region along with the remaining fields in both the table--

-- IMPLICIT JOIN --
SELECT people.first_name,states.state_abbrev
FROM people,states
WHERE people.state_code=states.state_abbrev;--join function takes place without uing the join keyword--

--we can also use nickaname if the table name is long--
SELECT ppl.first_name,ppl.last_name,st.region
FROM people ppl,states st
WHERE ppl.state_code=st.state_abbrev;

-- you can change the left and right join by swapping the table name--
SELECT ppl.first_name,ppl.last_name,st.region
FROM people ppl
JOIN states st ON ppl.state_code=st.state_abbrev;

--changing the table name to change the left and right join--
SELECT ppl.first_name,ppl.last_name,st.region
FROM  states st
JOIN people ppl ON ppl.state_code=st.state_abbrev;

SELECT DISTINCT(people.state_code),states.state_abbrev
FROM states 
LEFT JOIN people ON people.state_code=states.state_abbrev
ORDER BY people.state_code;
--State table as a whole is combined with the people table here the people table consists of only the data which matches with the states table-- 









	
		</sql><sql name="SQL 6">SELECT states.region,people.team,COUNT(team)
FROM states
JOIN people ON people.state_code=states.state_abbrev
GROUP BY states.region;

</sql><sql name="2.sqbpro">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;sqlb_project&gt;&lt;db path=&quot;C:/Users/ELCOT/Desktop/SQL Exercise files/Ex_Files_Learning_SQL_Prog/Exercise Files/SQLite/quizdata.db&quot; readonly=&quot;0&quot; foreign_keys=&quot;1&quot; case_sensitive_like=&quot;0&quot; temp_store=&quot;0&quot; wal_autocheckpoint=&quot;1000&quot; synchronous=&quot;2&quot;/&gt;&lt;attached/&gt;&lt;window&gt;&lt;main_tabs open=&quot;structure browser query pragmas&quot; current=&quot;2&quot;/&gt;&lt;/window&gt;&lt;tab_structure&gt;&lt;column_width id=&quot;0&quot; width=&quot;300&quot;/&gt;&lt;column_width id=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;column_width id=&quot;2&quot; width=&quot;100&quot;/&gt;&lt;column_width id=&quot;3&quot; width=&quot;1711&quot;/&gt;&lt;column_width id=&quot;4&quot; width=&quot;0&quot;/&gt;&lt;expanded_item id=&quot;0&quot; parent=&quot;1&quot;/&gt;&lt;expanded_item id=&quot;1&quot; parent=&quot;1&quot;/&gt;&lt;expanded_item id=&quot;2&quot; parent=&quot;1&quot;/&gt;&lt;expanded_item id=&quot;3&quot; parent=&quot;1&quot;/&gt;&lt;/tab_structure&gt;&lt;tab_browse&gt;&lt;current_table name=&quot;4,6:mainpeople&quot;/&gt;&lt;default_encoding codec=&quot;&quot;/&gt;&lt;browse_table_settings&gt;&lt;table schema=&quot;main&quot; name=&quot;people&quot; show_row_id=&quot;0&quot; encoding=&quot;&quot; plot_x_axis=&quot;&quot; unlock_view_pk=&quot;_rowid_&quot;&gt;&lt;sort/&gt;&lt;column_widths&gt;&lt;column index=&quot;1&quot; value=&quot;76&quot;/&gt;&lt;column index=&quot;2&quot; value=&quot;78&quot;/&gt;&lt;column index=&quot;3&quot; value=&quot;78&quot;/&gt;&lt;column index=&quot;4&quot; value=&quot;106&quot;/&gt;&lt;column index=&quot;5&quot; value=&quot;82&quot;/&gt;&lt;column index=&quot;6&quot; value=&quot;90&quot;/&gt;&lt;column index=&quot;7&quot; value=&quot;82&quot;/&gt;&lt;column index=&quot;8&quot; value=&quot;96&quot;/&gt;&lt;column index=&quot;9&quot; value=&quot;73&quot;/&gt;&lt;column index=&quot;10&quot; value=&quot;40&quot;/&gt;&lt;column index=&quot;11&quot; value=&quot;223&quot;/&gt;&lt;/column_widths&gt;&lt;filter_values/&gt;&lt;conditional_formats/&gt;&lt;row_id_formats/&gt;&lt;display_formats/&gt;&lt;hidden_columns/&gt;&lt;plot_y_axes/&gt;&lt;global_filter/&gt;&lt;/table&gt;&lt;table schema=&quot;main&quot; name=&quot;states&quot; show_row_id=&quot;0&quot; encoding=&quot;&quot; plot_x_axis=&quot;&quot; unlock_view_pk=&quot;_rowid_&quot;&gt;&lt;sort/&gt;&lt;column_widths&gt;&lt;column index=&quot;1&quot; value=&quot;97&quot;/&gt;&lt;column index=&quot;2&quot; value=&quot;97&quot;/&gt;&lt;column index=&quot;3&quot; value=&quot;62&quot;/&gt;&lt;column index=&quot;4&quot; value=&quot;118&quot;/&gt;&lt;/column_widths&gt;&lt;filter_values/&gt;&lt;conditional_formats/&gt;&lt;row_id_formats/&gt;&lt;display_formats/&gt;&lt;hidden_columns/&gt;&lt;plot_y_axes/&gt;&lt;global_filter/&gt;&lt;/table&gt;&lt;/browse_table_settings&gt;&lt;/tab_browse&gt;&lt;tab_sql&gt;&lt;sql name=&quot;WHERE and some criteria&quot;&gt;		--WHERE keyword is used to add  a condition to the SELECT statement--
--To get the rows which has statecode as CA using a condition we retrieve it --
SELECT * FROM people WHERE state_code='CA';
SELECT * FROM people WHERE state_code='FL';

--changing the fields--
SELECT * FROM people WHERE city='Miami';

--can also select specific rows while applying condiion it should be in the same order as below --
SELECT first_name,last_name,city
FROM people 
WHERE shirt_or_hat='shirt';

-- Adding more criteria to statements--
--Using logical operators--
SELECT first_name,last_name,team
FROM people 
WHERE shirt_or_hat='shirt' AND team='Angry Ants' AND state_code='CA';

-- In this we use an OR operator to display both the statecode values and return those in shirt and in team Angry Ants--
SELECT first_name,last_name,team,state_code,state_code
FROM people 
WHERE (state_code='CA' OR state_code='WA') AND shirt_or_hat='shirt' AND team='Angry Ants';

--we can also use not operation to display the rows which have state_code other tha WA --
SELECT first_name,last_name,team,state_code
FROM people 
WHERE shirt_or_hat='shirt' AND team='Angry Ants' AND state_code!='WA';







&lt;/sql&gt;&lt;sql name=&quot;SELECT&quot;&gt;		--SELECT keyword is used to collect information from the database--
--printing statement using SELECT statement--
SELECT 'Hello World!';

--selecting a particular field using SELECT--
SELECT first_name FROM people;

--selecting another field--
SELECT team FROM people;

--selecting multiple fields using a single statement--
SELECT state_code,team FROM people;
SELECT first_name,last_name FROM people;

--to select the entire table using the SELECT table--
SELECT * FROM people;



&lt;/sql&gt;&lt;sql name=&quot;Broading and limiting responses (1)&quot;&gt;	--LIKE is used along with % character it represents the portion of the string to ignore--
-- To find city whose name starts with B can be retrieved using this --
SELECT * FROM people 
WHERE city LIKE 'B%';

---- To find state_code which has A  can be retrieved using this --
SELECT * FROM people 
WHERE state_code LIKE '%A';-- Note the % symbol is changed o the right of character--

--To get the first_name which starts with J--
SELECT * FROM people 
WHERE first_name LIKE 'J%';

--To get the first_name which has on in it--
SELECT * FROM people 
WHERE first_name LIKE '%ON';

--To get the first_name which has j in it note id_number 594 it returns the first_name which has J in it--
SELECT * FROM people 
WHERE first_name LIKE '%J%';

--To get the first_name which starts with B and ends with N --
SELECT first_name,last_name FROM people 
WHERE first_name LIKE 'B%N';

--To get company which ends with LLC--
SELECT first_name,last_name,company FROM people 
WHERE company LIKE '%LLC';

--LIMIT keyword is used to limit the number of entries--
--To get the field of first name which starts with E and to limit it with 10 values--
SELECT first_name,last_name FROM people
WHERE first_name  LIKE 'E%' 
LIMIT 10;

--To get the company field which end LLC and limit the values with 5--\
SELECT first_name,last_name,company FROM people
WHERE  company LIKE '%LLC'
LIMIT 5;

--To get the company values of the value from 6 to 10 we can use OFFSET kaeyword--
SELECT first_name,last_name,company FROM people 
WHERE company LIKE '%LLC'
LIMIT 5 OFFSET 5;






&lt;/sql&gt;&lt;sql name=&quot;ORDERBY&quot;&gt;		--Sort the results of the query--
SELECT first_name,last_name,company FROM people
WHERE first_name LIKE '%S'
ORDER BY last_name;--here the query is displayed by ordered lastname in alphabetical order that too in ascending--

SELECT first_name,last_name,team FROM people
WHERE team LIKE 'A%'
ORDER BY team;

SELECT first_name,last_name,state_code FROM people
WHERE state_code LIKE '%A'
ORDER BY state_code;

SELECT first_name,last_name,team FROM people 
WHERE team LIKE '%S'
ORDER BY team;

--To get the field in descending order--
SELECT first_name,last_name,team FROM people 
WHERE team LIKE '%S'
ORDER BY last_name DESC;--The last_name is displayed in desending order--

SELECT first_name,last_name,team FROM people 
WHERE team LIKE '%S'
ORDER BY first_name DESC;--The first_name is displayed in desending order--

SELECT first_name,last_name,state_code FROM people 
WHERE state_code LIKE '%A'
ORDER BY team DESC;--The team is displayed in desending order--

SELECT first_name,last_name,team FROM people 
WHERE team LIKE '%S'
ORDER BY first_name DESC; --The first_name is displayed in desending order--














 
&lt;/sql&gt;&lt;sql name=&quot;Finding information about the data&quot;&gt;		--The information of the fields can be retrieved as follows--
--To find the length of the field--\
SELECT state_name,LENGTH(state_name)
FROM states;--It returns the length of the state_name--

SELECT region,LENGTH(region)
FROM states;--It returns the length of the region--


--Displaying unique values--

SELECT region FROM states;--It returns 50 rows--

--To display only the unique values we can use DISTINCT keyword--
SELECT DISTINCT(region)
FROM states;--It returns only 4 values which are unique--

SELECT DISTINCT(first_name)
FROM people 
ORDER BY first_name;--we can see the first name has only the unique values as well as it is ordered in ascending order--

SELECT DISTINCT(shirt_or_hat)
FROM people; 

--we can use COUNT function to see how many records match the given criteria--

SELECT COUNT(*)
FROM people
WHERE state_code='CA';

SELECT COUNT(city)
FROM people
WHERE shirt_or_hat='hat';

SELECT COUNT(region)
FROM states; 










&lt;/sql&gt;&lt;sql name=&quot;SQL 52&quot;&gt;SELECT team,shirt_or_hat,first_name,last_name
FROM people
WHERE state_code='CO'
ORDER BY team,shirt_or_hat,last_name DESC;
&lt;/sql&gt;&lt;current_tab id=&quot;5&quot;/&gt;&lt;/tab_sql&gt;&lt;/sqlb_project&gt;
</sql><sql name="2.sqbpro">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;sqlb_project&gt;&lt;db path=&quot;C:/Users/ELCOT/Desktop/SQL Exercise files/Ex_Files_Learning_SQL_Prog/Exercise Files/SQLite/quizdata.db&quot; readonly=&quot;0&quot; foreign_keys=&quot;1&quot; case_sensitive_like=&quot;0&quot; temp_store=&quot;0&quot; wal_autocheckpoint=&quot;1000&quot; synchronous=&quot;2&quot;/&gt;&lt;attached/&gt;&lt;window&gt;&lt;main_tabs open=&quot;structure browser query pragmas&quot; current=&quot;2&quot;/&gt;&lt;/window&gt;&lt;tab_structure&gt;&lt;column_width id=&quot;0&quot; width=&quot;300&quot;/&gt;&lt;column_width id=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;column_width id=&quot;2&quot; width=&quot;100&quot;/&gt;&lt;column_width id=&quot;3&quot; width=&quot;1711&quot;/&gt;&lt;column_width id=&quot;4&quot; width=&quot;0&quot;/&gt;&lt;expanded_item id=&quot;0&quot; parent=&quot;1&quot;/&gt;&lt;expanded_item id=&quot;1&quot; parent=&quot;1&quot;/&gt;&lt;expanded_item id=&quot;2&quot; parent=&quot;1&quot;/&gt;&lt;expanded_item id=&quot;3&quot; parent=&quot;1&quot;/&gt;&lt;/tab_structure&gt;&lt;tab_browse&gt;&lt;current_table name=&quot;4,6:mainpeople&quot;/&gt;&lt;default_encoding codec=&quot;&quot;/&gt;&lt;browse_table_settings&gt;&lt;table schema=&quot;main&quot; name=&quot;people&quot; show_row_id=&quot;0&quot; encoding=&quot;&quot; plot_x_axis=&quot;&quot; unlock_view_pk=&quot;_rowid_&quot;&gt;&lt;sort/&gt;&lt;column_widths&gt;&lt;column index=&quot;1&quot; value=&quot;76&quot;/&gt;&lt;column index=&quot;2&quot; value=&quot;78&quot;/&gt;&lt;column index=&quot;3&quot; value=&quot;78&quot;/&gt;&lt;column index=&quot;4&quot; value=&quot;106&quot;/&gt;&lt;column index=&quot;5&quot; value=&quot;82&quot;/&gt;&lt;column index=&quot;6&quot; value=&quot;90&quot;/&gt;&lt;column index=&quot;7&quot; value=&quot;82&quot;/&gt;&lt;column index=&quot;8&quot; value=&quot;96&quot;/&gt;&lt;column index=&quot;9&quot; value=&quot;73&quot;/&gt;&lt;column index=&quot;10&quot; value=&quot;40&quot;/&gt;&lt;column index=&quot;11&quot; value=&quot;223&quot;/&gt;&lt;/column_widths&gt;&lt;filter_values/&gt;&lt;conditional_formats/&gt;&lt;row_id_formats/&gt;&lt;display_formats/&gt;&lt;hidden_columns/&gt;&lt;plot_y_axes/&gt;&lt;global_filter/&gt;&lt;/table&gt;&lt;table schema=&quot;main&quot; name=&quot;states&quot; show_row_id=&quot;0&quot; encoding=&quot;&quot; plot_x_axis=&quot;&quot; unlock_view_pk=&quot;_rowid_&quot;&gt;&lt;sort/&gt;&lt;column_widths&gt;&lt;column index=&quot;1&quot; value=&quot;97&quot;/&gt;&lt;column index=&quot;2&quot; value=&quot;97&quot;/&gt;&lt;column index=&quot;3&quot; value=&quot;62&quot;/&gt;&lt;column index=&quot;4&quot; value=&quot;118&quot;/&gt;&lt;/column_widths&gt;&lt;filter_values/&gt;&lt;conditional_formats/&gt;&lt;row_id_formats/&gt;&lt;display_formats/&gt;&lt;hidden_columns/&gt;&lt;plot_y_axes/&gt;&lt;global_filter/&gt;&lt;/table&gt;&lt;/browse_table_settings&gt;&lt;/tab_browse&gt;&lt;tab_sql&gt;&lt;sql name=&quot;WHERE and some criteria&quot;&gt;		--WHERE keyword is used to add  a condition to the SELECT statement--
--To get the rows which has statecode as CA using a condition we retrieve it --
SELECT * FROM people WHERE state_code='CA';
SELECT * FROM people WHERE state_code='FL';

--changing the fields--
SELECT * FROM people WHERE city='Miami';

--can also select specific rows while applying condiion it should be in the same order as below --
SELECT first_name,last_name,city
FROM people 
WHERE shirt_or_hat='shirt';

-- Adding more criteria to statements--
--Using logical operators--
SELECT first_name,last_name,team
FROM people 
WHERE shirt_or_hat='shirt' AND team='Angry Ants' AND state_code='CA';

-- In this we use an OR operator to display both the statecode values and return those in shirt and in team Angry Ants--
SELECT first_name,last_name,team,state_code,state_code
FROM people 
WHERE (state_code='CA' OR state_code='WA') AND shirt_or_hat='shirt' AND team='Angry Ants';

--we can also use not operation to display the rows which have state_code other tha WA --
SELECT first_name,last_name,team,state_code
FROM people 
WHERE shirt_or_hat='shirt' AND team='Angry Ants' AND state_code!='WA';







&lt;/sql&gt;&lt;sql name=&quot;SELECT&quot;&gt;		--SELECT keyword is used to collect information from the database--
--printing statement using SELECT statement--
SELECT 'Hello World!';

--selecting a particular field using SELECT--
SELECT first_name FROM people;

--selecting another field--
SELECT team FROM people;

--selecting multiple fields using a single statement--
SELECT state_code,team FROM people;
SELECT first_name,last_name FROM people;

--to select the entire table using the SELECT table--
SELECT * FROM people;



&lt;/sql&gt;&lt;sql name=&quot;Broading and limiting responses (1)&quot;&gt;	--LIKE is used along with % character it represents the portion of the string to ignore--
-- To find city whose name starts with B can be retrieved using this --
SELECT * FROM people 
WHERE city LIKE 'B%';

---- To find state_code which has A  can be retrieved using this --
SELECT * FROM people 
WHERE state_code LIKE '%A';-- Note the % symbol is changed o the right of character--

--To get the first_name which starts with J--
SELECT * FROM people 
WHERE first_name LIKE 'J%';

--To get the first_name which has on in it--
SELECT * FROM people 
WHERE first_name LIKE '%ON';

--To get the first_name which has j in it note id_number 594 it returns the first_name which has J in it--
SELECT * FROM people 
WHERE first_name LIKE '%J%';

--To get the first_name which starts with B and ends with N --
SELECT first_name,last_name FROM people 
WHERE first_name LIKE 'B%N';

--To get company which ends with LLC--
SELECT first_name,last_name,company FROM people 
WHERE company LIKE '%LLC';

--LIMIT keyword is used to limit the number of entries--
--To get the field of first name which starts with E and to limit it with 10 values--
SELECT first_name,last_name FROM people
WHERE first_name  LIKE 'E%' 
LIMIT 10;

--To get the company field which end LLC and limit the values with 5--\
SELECT first_name,last_name,company FROM people
WHERE  company LIKE '%LLC'
LIMIT 5;

--To get the company values of the value from 6 to 10 we can use OFFSET kaeyword--
SELECT first_name,last_name,company FROM people 
WHERE company LIKE '%LLC'
LIMIT 5 OFFSET 5;






&lt;/sql&gt;&lt;sql name=&quot;ORDERBY&quot;&gt;		--Sort the results of the query--
SELECT first_name,last_name,company FROM people
WHERE first_name LIKE '%S'
ORDER BY last_name;--here the query is displayed by ordered lastname in alphabetical order that too in ascending--

SELECT first_name,last_name,team FROM people
WHERE team LIKE 'A%'
ORDER BY team;

SELECT first_name,last_name,state_code FROM people
WHERE state_code LIKE '%A'
ORDER BY state_code;

SELECT first_name,last_name,team FROM people 
WHERE team LIKE '%S'
ORDER BY team;

--To get the field in descending order--
SELECT first_name,last_name,team FROM people 
WHERE team LIKE '%S'
ORDER BY last_name DESC;--The last_name is displayed in desending order--

SELECT first_name,last_name,team FROM people 
WHERE team LIKE '%S'
ORDER BY first_name DESC;--The first_name is displayed in desending order--

SELECT first_name,last_name,state_code FROM people 
WHERE state_code LIKE '%A'
ORDER BY team DESC;--The team is displayed in desending order--

SELECT first_name,last_name,team FROM people 
WHERE team LIKE '%S'
ORDER BY first_name DESC; --The first_name is displayed in desending order--














 
&lt;/sql&gt;&lt;sql name=&quot;Finding information about the data&quot;&gt;		--The information of the fields can be retrieved as follows--
--To find the length of the field--\
SELECT state_name,LENGTH(state_name)
FROM states;--It returns the length of the state_name--

SELECT region,LENGTH(region)
FROM states;--It returns the length of the region--


--Displaying unique values--

SELECT region FROM states;--It returns 50 rows--

--To display only the unique values we can use DISTINCT keyword--
SELECT DISTINCT(region)
FROM states;--It returns only 4 values which are unique--

SELECT DISTINCT(first_name)
FROM people 
ORDER BY first_name;--we can see the first name has only the unique values as well as it is ordered in ascending order--

SELECT DISTINCT(shirt_or_hat)
FROM people; 

--we can use COUNT function to see how many records match the given criteria--

SELECT COUNT(*)
FROM people
WHERE state_code='CA';

SELECT COUNT(city)
FROM people
WHERE shirt_or_hat='hat';

SELECT COUNT(region)
FROM states; 










&lt;/sql&gt;&lt;sql name=&quot;SQL 52&quot;&gt;SELECT team,shirt_or_hat,first_name,last_name
FROM people
WHERE state_code='CO'
ORDER BY team,shirt_or_hat,last_name DESC;
&lt;/sql&gt;&lt;current_tab id=&quot;5&quot;/&gt;&lt;/tab_sql&gt;&lt;/sqlb_project&gt;
</sql><sql name="GROUP BY.sql">		--GROUP BY function--
--COUNT function is used to calculate the number of occurences--
SELECT first_name,COUNT(first_name)
FROM people
GROUP BY  first_name;--It returns the first_name and gives the count of number of occurences of the particular first_name--

SELECT last_name,COUNT(last_name)
FROM people
GROUP BY  last_name;

SELECT state_code,COUNT(state_code)
FROM people
GROUP BY  state_code;

SELECT state_code,quiz_points,COUNT(quiz_points)
FROM people
GROUP BY  state_name,quiz_points;





</sql><sql name="GROUPBY.">	--GROUP BY function--
--COUNT function is used to calculate the number of occurences--
SELECT first_name,COUNT(first_name)
FROM people
GROUP BY  first_name;--It returns the first_name and gives the count of number of occurences of the particular first_name--

SELECT last_name,COUNT(last_name)
FROM people
GROUP BY  last_name;

SELECT state_code,COUNT(state_code)
FROM people
GROUP BY  state_code;

SELECT state_code,quiz_points,COUNT(quiz_points)
FROM people
GROUP BY  state_name,quiz_points;





</sql><current_tab id="6"/></tab_sql></sqlb_project>
